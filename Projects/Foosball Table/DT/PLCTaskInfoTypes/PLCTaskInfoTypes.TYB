TYPE

	TASK_NAME_TYPE	: ARRAY[0..9] OF BYTE;
	RESERVE_8_BYTE	: ARRAY[1..8] OF BYTE;
	RESERVE_6_BYTE	: ARRAY[1..6] OF BYTE;
	TASK_NAME_ECLR	: STRING(35);

	(* extended task info data for MP2000_Series types *)
	EXT_TASK_INFO	: STRUCT
		(* 64 bytes *)
		(* structure can be arrayed *)
		TaskName		: TASK_NAME_TYPE; (* task name, NULL terminated *) 
		TaskPrio		: INT;            (* task priority *)
		unused_0		: INT;
		TaskPeriod		: INT;            (* task period (ms) *)
		TaskStack		: INT;            (* stack size *)
		unused_1		: INT;
		TaskWatchdog	: INT;            (* Watchdog time (ms) *)
		unused_2		: RESERVE_6_BYTE;
		CurDuration		: INT;            (* Current task duration in ticks including preemption *)
		MinDuration		: INT;            (* Minimum task duration *)
		MaxDuration		: INT;            (* Maximum task duration *)
		unused_3		: INT;
		CurDelay		: INT;            (* Current task delay in ticks including preemption *)
		MinDelay		: INT;            (* Minimum task delay *)
		MaxDelay		: INT;            (* Maximum task delay *)
		unused_4		: INT;
		CurDuration_us	: DINT;           (* Current task duration in microseconds including preemption *)
		MinDuration_us  : DINT;           (* Minimum task duration in microseconds including preemption *)
		MaxDuration_us	: DINT;           (* Maximum task duration in microseconds including preemption *)
		unused_5		: RESERVE_8_BYTE;
	END_STRUCT;

	(* task info data for eCLR types *)
	TASK_INFO_ECLR : STRUCT
		(* 128 bytes *)
		(* structure cannot be arrayed *)
		TaskStack         : INT;             (* Stack size of the task *)
		TaskPrio          : INT;             (* Priority of the task *)
		TaskPeriod_us     : DINT;            (* Period of the task in microseconds *)
		TaskWatchdog_us   : DINT;            (* Watchdog time in microseconds *)
		TaskPeriod        : INT;             (* Period of the task in milliseconds *)
		TaskWatchdog      : INT;             (* Watchdog time in milliseconds *)

		MinDuration_us    : DINT;            (* Minimum task duration in microseconds including preemption *)
		MaxDuration_us    : DINT;            (* Maximum task duration in microseconds including preemption *)
		CurDuration_us    : DINT;            (* Current task duration in microseconds including preemption *)
		MinDelay_us       : DINT;            (* Minimum task delay in microseconds including preemption *)
		MaxDelay_us       : DINT;            (* Maximum task delay in microseconds including preemption *)
		CurDelay_us       : DINT;            (* Current task delay in microseconds including preemption *)  

		MinDuration       : INT;             (* Minimum task duration in milliseconds including preemption *)
		MaxDuration       : INT;             (* Maximum task duration in milliseconds including preemption *)
		CurDuration       : INT;             (* Current task duration in milliseconds including preemption *)
		MinDelay          : INT;             (* Minimum task delay in milliseconds including preemption *)
		MaxDelay          : INT;             (* Maximum task delay in milliseconds including preemption *)
		CurDelay          : INT;             (* Current task delay in milliseconds including preemption *)  

		unused_1          : DINT;
		unused_2          : DINT;
		unused_3          : DINT;
		unused_4          : DINT;
		unused_5          : DINT;
		unused_6          : DINT;
		unused_7          : DINT;
		unused_8          : DINT;
		unused_9          : DINT;

		TaskName          : TASK_NAME_ECLR;  (* Name of the Task as ARRAY OF BYTE, NULL terminated *) 
	END_STRUCT;

  (* Timing data for motion kernel tasks
   * Place this optional structure at the following memory locations:
   * ISR  Timing:     %MD3.65536
   * ISR  Evt Timing: %MD3.65560
   * High Evt Timing: %MD3.65584
   * Low  Evt Timing: %MD3.65608
   * Alm  Evt Timing: %MD3.65632   
   *)
  SYS_TIMING_INFO : STRUCT 
    CurDuration_us        : UDINT;  (* Duration of most recent cycle in microseconds including preemption *)
    MinDuration_us        : UDINT;  (* Minimum cycle duration in microseconds including preemption  *)
    MaxDuration_us        : UDINT;  (* Maximum cycle duration in microseconds including preemption  *)
    CumulativeDuration_us : UDINT;  (* Cumulative execution time in microseconds including preemption  *)
    CyclicPeriod_us       : UDINT;  (* Cyclic period for ISR Timing only. 0 for other contexts *)
    Reserved1             : UDINT;
  END_STRUCT;

  (* High-resolution task timing information - MP2000_Series PLC Type Only *)
  HIRES_TASK_TIMING_INFO : STRUCT
    CurDuration_us  : UDINT;  (* Current task duration in microseconds including preemption *)
    MinDuration_us  : UDINT;  (* Minimum task duration in microseconds including preemption *)
    MaxDuration_us  : UDINT;  (* Maximum task duration in microseconds including preemption *)
    Reserved1       : UDINT;
    TaskPrio        : INT;    (* Task priority in milliseconds, matches EXT_TASK_INFO data  *)
    TaskPeriod      : INT;    (* Task period in milliseconds, matches EXT_TASK_INFO data    *)
    TaskWatchdog    : INT;    (* Task watchdog in milliseconds, matches EXT_TASK_INFO data  *)
    Reserved2       : INT;
  END_STRUCT;

  (* Place this optional array at %MD3.65792 - MP2000_Series PLC Type Only *)
  HIRES_TASK_TIMING_INFO_ARRAY : ARRAY[1..16] OF HIRES_TASK_TIMING_INFO;
END_TYPE
