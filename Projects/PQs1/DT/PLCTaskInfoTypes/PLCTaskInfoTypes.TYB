TYPE

	TASK_NAME_TYPE 	: ARRAY[0..9] OF BYTE;
	RESERVE_22_BYTE : ARRAY[1..22] OF BYTE;
	RESERVE_6_BYTE  : ARRAY[1..6] OF BYTE;
	TASK_NAME_ECLR  : STRING(35);

	(* extended task info data for MP2000_Series types *)
	EXT_TASK_INFO	: STRUCT
		(* 64 bytes *)
		(* structure can be arrayed *)
		Name			: TASK_NAME_TYPE;   (* task name, NULL terminated *)
		Priority		: INT;            (* task priority *)
		unused_0		: INT;
		Period			: INT;            (* task period (ms) *)
		Stack			: INT;              (* stack size *)
		unused_1		: INT;
		Watchdog		: INT;            (* Watchdog time (ms) *)
		unused_2		: RESERVE_6_BYTE;
		CurDuration		: INT;          (* Current task duration in ticks including preemption *)
		MinDuration		: INT;          (* Minimum task duration *)
		MaxDuration		: INT;          (* Maximum task duration *)
		unused_3		: INT;
		CurDelay		: INT;            (* Current task delay in ticks including preemption *)
		MinDelay		: INT;            (* Minimum task delay *)
		MaxDelay		: INT;            (* Maximum task delay *)
		unused_4		: RESERVE_22_BYTE;
	END_STRUCT;


	(* task info data for eCLR types *)
	TASK_INFO_ECLR : STRUCT
		(* 128 bytes *)
		(* sturcture cannot be arrayed *)
		Stack         : INT;      	       (* Stack size of the task *)
		Priority      : INT;        	     (* Priority of the task *)
		Period_us     : DINT;           	 (* Period of the task in microseconds *)
		Watchdog_us   : DINT;          	   (* Watchdog time in microseconds *)
		Period        : INT;            	 (* Period of the task in milliseconds *)
		Watchdog      : INT;             	 (* Watchdog time in milliseconds *)

		MinDuration_us    : DINT;          (* Minimum task duration in microseconds including preemption *)
		MaxDuration_us    : DINT;          (* Maximum task duration in microseconds including preemption *)
		CurDuration_us    : DINT;          (* Current task duration in microseconds including preemption *)
		MinDelay_us       : DINT;          (* Minimum task delay in microseconds including preemption *)
		MaxDelay_us       : DINT;          (* Maximum task delay in microseconds including preemption *)
		CurDelay_us       : DINT;          (* Current task delay in microseconds including preemption *)

		MinDuration       : INT;           (* Minimum task duration in milliseconds including preemption *)
		MaxDuration       : INT;           (* Maximum task duration in milliseconds including preemption *)
		CurDuration       : INT;           (* Current task duration in milliseconds including preemption *)
		MinDelay          : INT;           (* Minimum task delay in milliseconds including preemption *)
		MaxDelay          : INT;           (* Maximum task delay in milliseconds including preemption *)
		CurDelay          : INT;           (* Current task delay in milliseconds including preemption *)

		unused_1          : DINT;
		unused_2          : DINT;
		unused_3          : DINT;
		unused_4          : DINT;
		unused_5          : DINT;
		unused_6          : DINT;
		unused_7          : DINT;
		unused_8          : DINT;
		unused_9          : DINT;

		Name         	  : TASK_NAME_ECLR;  (* Name of the Task as ARRAY OF BYTE, NULL terminated *)
	END_STRUCT;


	TIMING_INFO : STRUCT
		current    : UDINT;
		minimum    : UDINT;
		maximum    : UDINT;
		cumulative : UDINT;
		reserved1  : UDINT;
		reserved2  : UDINT;
	END_STRUCT;


	MotionEngine : STRUCT
		MotionScan   	: TIMING_INFO;
		ISREvent  		: TIMING_INFO;
		SystemEventH 	: TIMING_INFO;
		SystemEventL 	: TIMING_INFO;
		AlarmHandler	: TIMING_INFO;
	END_STRUCT;


	TASK_TIMING_INFO : STRUCT
		current    : UDINT;
		minimum    : UDINT;
		maximum    : UDINT;
		reserved1  : UDINT;
		reserved2  : UDINT;
		reserved3  : UDINT;
	END_STRUCT;

	TASK_TIMING_INFO_ARRAY : ARRAY[1..16] OF TASK_TIMING_INFO;


END_TYPE
